// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// User model for our TripSplit application
model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String
  upiId    String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth.js required relations
  accounts Account[]
  sessions Session[]

  // TripSplit relations
  ownedTrips Trip[] @relation("TripOwner")
  tripUsers  TripUser[]
  expenses   Expense[]

  @@map("users")
}

// Trip model
model Trip {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String

  // Relations
  owner     User       @relation("TripOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tripUsers TripUser[]
  expenses  Expense[]

  @@map("trips")
}

// Join table for Trip and User (many-to-many)
model TripUser {
  id     String @id @default(cuid())
  userId String
  tripId String
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([userId, tripId])
  @@map("trip_users")
}

// Expense model
model Expense {
  id        String   @id @default(cuid())
  title     String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tripId    String
  paidById  String

  // Relations
  trip   Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  paidBy User @relation(fields: [paidById], references: [id], onDelete: Cascade)

  @@map("expenses")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
